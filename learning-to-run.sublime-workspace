{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"impo",
				"import"
			],
			[
				"open",
				"opensim\tmodule"
			],
			[
				"n",
				"netifaces\tmodule"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import argparse\nimport time\nimport os\nimport logging\nfrom baselines import logger, bench\nfrom baselines.common.misc_util import (\n    set_global_seeds,\n    boolean_flag,\n)\n\n#import baselines.ddpg.training as training\nimport training\n\nfrom model import Actor, Critic\nfrom baselines.ddpg.memory import Memory\nfrom baselines.ddpg.noise import *\n\nimport gym\nimport tensorflow as tf\nfrom mpi4py import MPI\n\ndef run(env_id, seed, noise_type, layer_norm, evaluation, **kwargs):\n\n    param_noise = None\n    # Configure things.\n    rank = MPI.COMM_WORLD.Get_rank()\n    if rank != 0:\n        logger.set_level(logger.DISABLED)\n\n    # Create envs.\n    env = gym.make(env_id)\n    # env = bench.Monitor(env, logger.get_dir() and os.path.join(logger.get_dir(), str(rank)))\n\n    if evaluation and rank==0:\n        eval_env = gym.make(env_id)\n        eval_env = bench.Monitor(eval_env, os.path.join(logger.get_dir(), 'gym_eval'))\n        env = bench.Monitor(env, None)\n    else:\n        eval_env = None\n\n    # Parse noise_type\n    nb_actions = env.action_space.shape[-1]\n    action_noise = OrnsteinUhlenbeckActionNoise(mu=np.zeros(nb_actions), sigma=np.ones(nb_actions))\n\n    # Configure components.\n    memory = Memory(limit=int(1e6), action_shape=env.action_space.shape, observation_shape=env.observation_space.shape)\n    actor = Actor(nb_actions, layer_norm=layer_norm)\n    critic = Critic(layer_norm=layer_norm)\n\n    # Seed everything to make things reproducible.\n    seed = seed + 1000000 * rank\n    logger.info('rank {}: seed={}, logdir={}'.format(rank, seed, logger.get_dir()))\n    tf.reset_default_graph()\n    set_global_seeds(seed)\n    env.seed(seed)\n    if eval_env is not None:\n        eval_env.seed(seed)\n\n    # Disable logging for rank != 0 to avoid noise.\n    if rank == 0:\n        start_time = time.time()\n    training.train(env=env, action_noise=action_noise, actor=actor, critic=critic, memory=memory, **kwargs)\n    env.close()\n    if eval_env is not None:\n        eval_env.close()\n    if rank == 0:\n        logger.info('total runtime: {}s'.format(time.time() - start_time))\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('--env-id', type=str, default='HalfCheetah-v1')\n    #boolean_flag(parser, 'render-eval', default=False)\n    boolean_flag(parser, 'layer-norm', default=True)\n    #boolean_flag(parser, 'render', default=False)\n    boolean_flag(parser, 'normalize-returns', default=False)\n    boolean_flag(parser, 'normalize-observations', default=True)\n    parser.add_argument('--seed', help='RNG seed', type=int, default=0)\n    parser.add_argument('--critic-l2-reg', type=float, default=1e-2)\n    parser.add_argument('--batch-size', type=int, default=64)  # per MPI worker\n    parser.add_argument('--actor-lr', type=float, default=1e-4)\n    parser.add_argument('--critic-lr', type=float, default=1e-3)\n    boolean_flag(parser, 'popart', default=False)\n    parser.add_argument('--gamma', type=float, default=0.99)\n    parser.add_argument('--reward-scale', type=float, default=1.)\n    parser.add_argument('--clip-norm', type=float, default=None)\n    parser.add_argument('--nb_epochs', type=int, default=500)  # with default settings, perform 1M steps total\n    parser.add_argument('--nb_episodes', type=int, default=20)\n    # per epoch cycle and MPI worker\n    parser.add_argument('--nb_train_steps', type=int, default=50)\n    parser.add_argument('--nb_eval_episodes', type=int, default=5)\n    # per epoch cycle and MPI worker\n    parser.add_argument('--episode_length', type=int, default=100)\n    parser.add_argument('--eval_freq', type=int, default=20)\n    parser.add_argument('--noise-type', type=str, default='adaptive-param_0.2')  # choices are adaptive-param_xx, ou_xx, normal_xx, none\n    parser.add_argument('--num-timesteps', type=int, default=None)\n    boolean_flag(parser, 'evaluation', default=False)\n    args = parser.parse_args()\n    # we don't directly specify timesteps for this script, so make sure that if we do specify them\n    # they agree with the other parameters\n    if args.num_timesteps is not None:\n        assert(args.num_timesteps == args.nb_epochs * args.nb_epoch_cycles * args.nb_rollout_steps)\n    dict_args = vars(args)\n    del dict_args['num_timesteps']\n    return dict_args\n\n\nif __name__ == '__main__':\n    args = parse_args()\n    if MPI.COMM_WORLD.Get_rank() == 0:\n        logger.configure()\n    # Run actual script.\n    run(**args)\n",
			"file": "macchininarossarossa_example/main.py",
			"file_size": 4461,
			"file_write_time": 131698550695812213,
			"settings":
			{
				"buffer_size": 4461,
				"line_ending": "Unix"
			}
		},
		{
			"file": "learning-to-run.sublime-project",
			"settings":
			{
				"buffer_size": 594,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 274.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 497.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/emiliano/devel/python_projects/learning-to-run",
		"/home/emiliano/devel/python_projects/learning-to-run/osim"
	],
	"file_history":
	[
		"/home/emiliano/devel/python_projects/learning-to-run/learning-to-run.sublime-project",
		"/home/emiliano/devel/python_projects/learning-to-run/test.py",
		"/home/emiliano/devel/python_projects/learning-to-run/macchininarossarossa_example/main.py",
		"/home/emiliano/devel/python_projects/learning-to-run/.gitignore",
		"/home/emiliano/.config/sublime-text-3/Packages/Anaconda/README.md",
		"/home/emiliano/ciao.py",
		"/home/emiliano/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/emiliano/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "macchininarossarossa_example/main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4461,
						"regions":
						{
						},
						"selection":
						[
							[
								171,
								171
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "learning-to-run.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 594,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "learning-to-run.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 158.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
